02/02/2017
	Aim: Documentmenting your data

	Do Now: What are some of the drawbacks to using a SQL database?

	Document-Oriented Database
		Records in Document-Oriented Databases are stored as documents.

		Each document contains all the data that is associated with the given record
		in key-value pairs (fields).

		Documents in the same collection do not need to have the same fields.

		Documents that are meant to be stored together are put into collections.

		You do not need to specify the type of data put into each field.

		Fields can contain many different kinds of data, including lists and
		other documents.

		Each document has its own primary key, usually generated by Mongo.

02/03/2017
    Aim: Mongo likes py
		
    DB Hierarchy
        DB Server (mongod) -> Databases -> Collections -> Documents

    Working with pymongo
        from pymongo import MongoClient

        Connecting to a mongodb server and database
            server = MongoClient(<IP>)

        To access databases, collections, and documents, you can use either
        dot notation or bracket notation.
            db = server['mydb'] OR db = server.mydb
            c = db['students'] OR  c = db.students

        Databases and collections are not created until a document has been
        added to them!

        To add a document:
        1. Create a dictionary
        2. Insert it into the collection

02/06/2017
    Aim: Where'd mongo put that data?

    Retrieving data from mongodb
        col.find()
            Collection method that returns a cursor object that can be used
            to iterate through all the documents in a collection.

        col.find_one()
            Collection method that returns a single document as a dictionary.

        Search criteria can be modified using '$and', '$or', and '$not'.
            foo.find_one({
                '$and': [{
                    'name': 'bob'
                }, {
                    'age': 25
                }]
            })
    
02/08/2017
    Aim: UpDAT(A)ing mongo

    Modifying data
        col.delete_one(<QUERY>)
            Deletes the first document that matches the query.

        col.delete_many(<QUERY>)
            Deletes all documents that match the query.

        col.update(<QUERY>, <OPERATION>)
            Updates a document that matches the query.

            Operation is a document that matches an update operation.
                '$set'
                    Change the value of a field.

                '$unset'
                    Remove a field.

                '$inc'
                    Increment the value of a field.

02/13/2017
    Aim: Canvasing the area

    HTML5
        Redesign of HTML with a focus on making the more "modern" features
        of web browsers easier to work with.

        Designed around JavaScript and a standardized DOM.

        Includes built in support for audio and video playback.
        
    Canvas
        HTML5 element that provides a drawing area.

        Javascript functions can draw onto a canvas element.
            You must declare what context you are drawing in.

            For example: 2D drawing, 3D drawing, raw bitmap rendering...

02/14/2017
    Aim:

    JavaScript path functions
        Paths are used to draw arbitrary shapes, including circles and curves.

        A context can keep track of one path at a time.

        The path is not drawn until stroke() is called.

        A path is considered done when a new beginPath() is called.

        ctx.beginPath()
            Starts or resets the current path.

        ctx.moveTo(x, y)
            Moves the path to position (x, y).

            Does not result in a line or a filled in area.

        ctx.lineTo(x, y)
            Moves the path to position (x, y).

            Will result in a line and a filled in area.

        ctx.closePath(x, y)
            Results in a line from the current position to the
            starting position.

            The path can be continued after closePath() is called.

        ctx.stroke()
            Renders all the lines in the path.

            Does not end the path.

        ctx.fill()
            Fills the interior of the path.

            Will not work if the path has less than 3 points in it.
