02/02/2017
	Aim: Documentmenting your data

	Do Now: What are some of the drawbacks to using a SQL database?

	Document-Oriented Database
		Records in Document-Oriented Databases are stored as documents.

		Each document contains all the data that is associated with the given record
		in key-value pairs (fields).

		Documents in the same collection do not need to have the same fields.

		Documents that are meant to be stored together are put into collections.

		You do not need to specify the type of data put into each field.

		Fields can contain many different kinds of data, including lists and
		other documents.

		Each document has its own primary key, usually generated by Mongo.

02/03/2017
    Aim: Mongo likes py
		
    DB Hierarchy
        DB Server (mongod) -> Databases -> Collections -> Documents

    Working with pymongo
        from pymongo import MongoClient

        Connecting to a mongodb server and database
            server = MongoClient(<IP>)

        To access databases, collections, and documents, you can use either
        dot notation or bracket notation.
            db = server['mydb'] OR db = server.mydb
            c = db['students'] OR  c = db.students

        Databases and collections are not created until a document has been
        added to them!

        To add a document:
        1. Create a dictionary
        2. Insert it into the collection

02/06/2017
    Aim: Where'd mongo put that data?

    Retrieving data from mongodb
        col.find()
            Collection method that returns a cursor object that can be used
            to iterate through all the documents in a collection.

        col.find_one()
            Collection method that returns a single document as a dictionary.

        Search criteria can be modified using '$and', '$or', and '$not'.
            foo.find_one({
                '$and': [{
                    'name': 'bob'
                }, {
                    'age': 25
                }]
            })
    
02/08/2017
    Aim: UpDAT(A)ing mongo

    Modifying data
        col.delete_one(<QUERY>)
            Deletes the first document that matches the query.

        col.delete_many(<QUERY>)
            Deletes all documents that match the query.

        col.update(<QUERY>, <OPERATION>)
            Updates a document that matches the query.

            Operation is a document that matches an update operation.
                '$set'
                    Change the value of a field.

                '$unset'
                    Remove a field.

                '$inc'
                    Increment the value of a field.

02/13/2017
    Aim: Canvasing the area

    HTML5
        Redesign of HTML with a focus on making the more "modern" features
        of web browsers easier to work with.

        Designed around JavaScript and a standardized DOM.

        Includes built in support for audio and video playback.
        
    Canvas
        HTML5 element that provides a drawing area.

        Javascript functions can draw onto a canvas element.
            You must declare what context you are drawing in.

            For example: 2D drawing, 3D drawing, raw bitmap rendering...

02/14/2017
    Aim:

    JavaScript path functions
        Paths are used to draw arbitrary shapes, including circles and curves.

        A context can keep track of one path at a time.

        The path is not drawn until stroke() is called.

        A path is considered done when a new beginPath() is called.

        ctx.beginPath()
            Starts or resets the current path.

        ctx.moveTo(x, y)
            Moves the path to position (x, y).

            Does not result in a line or a filled in area.

        ctx.lineTo(x, y)
            Moves the path to position (x, y).

            Will result in a line and a filled in area.

        ctx.closePath(x, y)
            Results in a line from the current position to the
            starting position.

            The path can be continued after closePath() is called.

        ctx.stroke()
            Renders all the lines in the path.

            Does not end the path.

        ctx.fill()
            Fills the interior of the path.

            Will not work if the path has less than 3 points in it.

02/16/2017
    Aim:

    Use requestAnimationFrame instead of setInterval
        requestAnimationFrame tells the browser to run a specified function
        before drawing the next frame.

        The browser will attempt to run ~60 frames per second.

        It lets the browser handle when the code should be executed (as opposed
        to setInterval, which is based on specific times).

        It also allows the browser to pause animation when a page is not in the
        foreground.

        window.requestAnimationFrame(<function>)

02/27/2017
    Aim: What's your vector victor?

    XML
        eXtensible Markup Language

        It is not a formatting language (but HTML is).

        A framework for creating markup based grammars.

        Uses some of the syntatic standards of HTML, like tags and attributes,
        with a focus on storing and representing data instead of rendering and
        displaying it.

        An XML namespace is defined by the tags and attributes associated
        with a specific XML language.

    SVG
        Scalable Vector Graphics

        SVG is a specific XML based vector graphics format.

        Vector graphics are images that are not represented as a 2D grid of
        pixels (raster) but instead as a list of drawing commands (line,
        circle, rectangle, curve, etc.)

        The <svg> element is designed to store SVG code (SVG XML elements).
            <svg xmlns="http://www.w3.org/2000/svg">
                SVG CODE HERE
            </svg>

02/28/2017
    Aim: Vectorize me

    Creating SVG elements in JavaScript
        document.createElementNS(<namespace>, <element>);
            Creates an element from a specified XML namespace.

            var cl = document.createElementNS('http://www.w3.org/2000/svg/', 'circle');

            Once created, you can modify it with setAttribute calls.

            cl.setAttribute('cx', '200');

03/06/2017
    JavaScript Event Propagation
        Events initially propagate downward from the topmost node in the DOM
        tree to the target element. This is known as event capturing.

        After an event reaches a target, it then propagates back up the DOM
        tree. This is known as event bubbling.

        By default, event listeners do not trigger until the event 
        bubbling phase.

        Triggering events at the capture phase can be done by adding true as
        the third argument to addEventListener.

        x.addEventListener('click', foo, true);
        Cancel with e.stopPropagation(); 

        1. An element intercepts an event
        2. Browser collects DOM node path of the event from the starting element to the root
        3. Capture: the event propagates down the path from step 2
        4. Bubble: the event propagates up the path from step 3

03/10/2017
    Aim: r3d3?

    d3.js
        JavaScript framework designed for working with data.

        The Basics
            Include http://d3js.org/d3.v3.min.js in a script tag to use d3, or
            download the source and link that instead.

        Binding Data
            You can bind data to elements in d3 using the .data method.
                var info = [23, 45, 10, 17];
                d3.selectAll('p').data(info);

            Binding data allows us to use it in other d3 calls.

            Many of the methods that can use anonymous functions allow for
            parameters to those functions. The first parameter represents
            an item in the bound data, and the second represents the index
            of the item in the data set.

04/19/2017
    Aim: Lists, comprendo?

    List comprehensions
        Programming construct for building lists out of existing lists

04/25/2017
    Aim: Let's get some closure (not Clojure).

    Closures
        1. A function is declared inside another function.
        2. The inner function accesses a variable from the outer function
           (outside of the local scope of the inner function)
        3. The external function binds a value to the variable and finishes (or
           closes) before the inner function can be completed.

        def repeat(s):
            def times(x):
                return s * x

            return times

04/26/2017
    Lambda expressions
        Anonymous functions can be created using lambda
            lambda <arguments>: <definition>

05/01/2017
    No functional programming toolbox would be complete without the
    following concepts:
        Memoization, Map, Filter, Reduce

    Memoization
        Reducing the time it takes to complete an (often recursive) algorithm
        by saving previously computed values to be used later.

        Can be easily created using decorators.

    Map/Filter/Reduce
        The holy trinity of list processing

        Reduce
            Compute some value based on a list (i.e. reducing the list to a
            single value)

            reduce(<function>, <list>)
                Function must take 2 parameters and return 1

        Map
            Creates a new list by applying a function to all elements of an
            existing list
            
            map(<function>, <list>)

        Filter
            Creates a new list by applying a boolean condition to all
            elements of an existing list

            filter(<function>, <list>)
