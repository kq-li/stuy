(defun parse-stream (stream)
  (loop
     for command = (read-line stream nil)
     while command
     do
       (let ((*read-eval* nil))
         (cond
           ((string= (subseq command 0 1) "#"))
           ((string= command "line")
            (format t "Drawing line...~%")
            (let* ((x1 (read stream nil nil))
                   (y1 (read stream nil nil))
                   (z1 (read stream nil nil))
                   (x2 (read stream nil nil))
                   (y2 (read stream nil nil))
                   (z2 (read stream nil nil))
                   (point1 (make-point :initial-list (list x1 y1 z1)))
                   (point2 (make-point :initial-list (list x2 y2 z2))))
              (add-edge point1 point2)))
           ((string= command "circle")
            (format t "Drawing circle...~%")
            (let* ((x (read stream nil nil))
                   (y (read stream nil nil))
                   (z (read stream nil nil))
                   (r (read stream nil nil)))
              (add-circle x y z r)))
           ((string= command "hermite")
            (format t "Drawing hermite curve...~%")
            (let* ((x0 (read stream nil nil))
                   (y0 (read stream nil nil))
                   (x1 (read stream nil nil))
                   (y1 (read stream nil nil))
                   (rx0 (read stream nil nil))
                   (ry0 (read stream nil nil))
                   (rx1 (read stream nil nil))
                   (ry1 (read stream nil nil)))
              (add-hermite-curve x0 y0 x1 y1 rx0 ry0 rx1 ry1)))
           ((string= command "bezier")
            (format t "Drawing bezier curve...~%")
            (let* ((x0 (read stream nil nil))
                   (y0 (read stream nil nil))
                   (x1 (read stream nil nil))
                   (y1 (read stream nil nil))
                   (x2 (read stream nil nil))
                   (y2 (read stream nil nil))
                   (x3 (read stream nil nil))
                   (y3 (read stream nil nil)))
              (add-bezier-curve x0 y0 x1 y1 x2 y2 x3 y3)))
           ((string= command "box")
            (format t "Drawing box...~%")
            (let* ((x (read stream nil nil))
                   (y (read stream nil nil))
                   (z (read stream nil nil))
                   (width (read stream nil nil))
                   (height (read stream nil nil))
                   (depth (read stream nil nil)))
              (add-box x y z width height depth)))
           ((string= command "sphere")
            (format t "Drawing sphere...~%")
            (let* ((x (read stream nil nil))
                   (y (read stream nil nil))
                   (z (read stream nil nil))
                   (r (read stream nil nil)))
              (add-sphere x y z r)))
           ((string= command "torus")
            (format t "Drawing torus...~%")
            (let* ((x (read stream nil nil))
                   (y (read stream nil nil))
                   (z (read stream nil nil))
                   (cr (read stream nil nil))
                   (tr (read stream nil nil)))
              (add-torus x y z cr tr)))
           ((string= command "ident")
            (format t "Setting identity matrix...~%")
            (setf *transformation-matrix* (make-identity-matrix)))
           ((string= command "scale")
            (format t "Scaling...~%")
            (let* ((x (read stream nil nil))
                   (y (read stream nil nil))
                   (z (read stream nil nil))
                   (matrix (make-scale-matrix x y z)))
              (setf *transformation-matrix*
                    (matrix-matrix-mult matrix *transformation-matrix*))))
           ((string= command "move")
            (format t "Moving...~%")
            (let* ((x (read stream nil nil))
                   (y (read stream nil nil))
                   (z (read stream nil nil))
                   (matrix (make-translation-matrix x y z)))
              (setf *transformation-matrix*
                    (matrix-matrix-mult matrix *transformation-matrix*))))
           ((string= command "rotate")
            (format t "Rotating...~%")
            (let* ((axis (string (read stream nil nil)))
                   (angle (read stream nil nil))
                   (matrix (make-rotation-matrix axis angle)))
              (setf *transformation-matrix*
                    (matrix-matrix-mult matrix *transformation-matrix*))))
           ((string= command "apply")
            (format t "Applying...~%")
            (setf *edge-matrix* (matrix-matrix-mult *transformation-matrix* *edge-matrix*))
            (setf *triangle-matrix*
                  (matrix-matrix-mult *transformation-matrix* *triangle-matrix*))
            (format t "Edge matrix dimensions: ~a~%" (matrix-dimensions *edge-matrix*))
            (format t "Triangle matrix dimensions: ~a~%" (matrix-dimensions *triangle-matrix*))
            (setf *transformation-matrix* (make-identity-matrix)))
           ((string= command "clear")
            (format t "Clearing...~%")
            (clear-edge-matrix)
            (clear-triangle-matrix))
           ((string= command "display")
            (clear-screen)
            (format t "Drawing lines...~%")
            (draw-lines)
            (format t "Drawing triangles...~%")
            (draw-triangles)
            (format t "Displaying...~%")
            (display))
           ((string= command "save")
            (format t "Saving...~%")
            ;;(format t "~a~%" *screen*)
            (let ((filename (string-trim '(#\Space #\Return) (read-line stream nil))))
              (create filename)
              (format t "Saved ~a~%" filename)))))))

(defun parse-string (string)
  (with-input-from-string (stream string)
    (parse-stream stream)))

(defun parse-file (filename)
  (with-open-file (stream filename)
    (parse-stream stream)))
