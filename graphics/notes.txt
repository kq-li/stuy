02/01/2017
	Aim: Bits o' pixels?

	How would you represent color data if you only had the following amount of
	space for each pixel?

	1. 1 bit  - 1 bit for color
	2. 2 bits - 1 bit for color, 1 bit for intensity
	3. 3 bits - 1 bit for each color (RGB)
	4. 4 bits - 1 bit for each color (RGB), 1 bit for intensity
	5. 6 bits - 2 bits for each color (RGB); 1 bit for color, 1 bit for intensity

	Color depth - number of bits used per pixel

	Image File Formats
		Lossless vs. lossy, compressed vs. uncompressed

		JPG - compressed, lossy
		PNG - compressed, lossless
		BMP - uncompressed, lossless
		TIFF - uncompressed, lossless
		RAW - uncompressed, lossless
		GIF - uncompressed, lossless
		
02/02/2017
	Aim:

	RUn Length Encoding
		GGGRPPPP -> 3G1R4P (2 bytes shorter)

	Rasters vs Vectors
		Raster: data corresponds to pixels
		Vector: image data encoded as list of commands

	Net PBM
		Family of formats

		We will use .ppm
			All whitespace is the same

			Header
				P3
				XRES YRES
                Scale factor

			Pixel Data
				3 numbers, 0-255 (RGB)

02/06/2017
    Aim: Bresenham's Line Algorithm

    y = mx + b
    y = (Δy/Δx)x + b
    Δyx - Δxy + Δxb
    A = Δy
    B = -Δx
    C = Δxb
    Ax + By + C = 0
    f(x, y) = Ax + By + C

    f(x, y) = 0: (x, y) on the line
    f(x, y) < 0: (x, y) above the line
    f(x, y) > 0: (x, y) below the line
    f(x, y) ~ distance from (x, y) to line

    0 < m <= 1: only look at pixel to right and upper right

02/07/2017
    Aim: Bresenham's Line Algorithm, continued

    Evaluate f at both pixels -> inefficient
    Evaluate f at midpoint
        If midpoint above line, plot bottom pixel
        If midpoint below line, plot top pixel

    Two pixels: (x + 1, y), (x + 1, y + 1)
    Midpoint: (x + 1, y + 0.5)
    f(x + 1, y + 0.5) < 0: midpoint above line, plot bottom pixel
    f(x + 1, y + 0.5) > 0: midpoint below line, plot top pixel
    f(x + 1, y + 0.5) = 0: plot either, be consistent


    Pseudocode
        y = y0

        for x: x0 to x1
            plot(x, y)
            
            d = f(x + 1, y + 0.5)

            if (d > 0)
                y++

            x++

02/08/2017
    Aim: Optimization

    f(x, y) = Ax + By + C
            = Δyx - Δxy + Δxb

    (x0, y0) -> (x1, y1)

    Problems
        Expensive "f" calculations
        Floating point calculations

    Octant 1 Algorithm
        x = x0
        y = y0
        d = 2A + B

        while (x <= x1)
            plot(x, y)

            if (d > 0)
                y++
                d += 2B

            x++
            d += 2A

02/13/2017
    Octant 8 Algorithm
        x = x0
        y = y0
        d = 2A - B

        while (x <= x1)
            plot(x, y)

            if (d < 0)
                y--
                d -= 2B

            x++
            d += 2A

    Octant 2 Algorithm
        x = x0
        y = y0
        d = A + 2B

        while (y <= y1)
            plot(x, y)

            if (d < 0)
                x++
                d += 2A

            y++
            d += 2B

    Octant 7 Algorithm
        x = x0
        y = y0
        d = A - 2B

        while (y >= y1)
            plot(x, y)

            if (d > 0)
                x++
                d += 2A

            y--
            d -= 2B

02/16/2017
    To allow efficient transformations, store images as a list of edges.
    
    Each pair of points in the list will define an edge.
        [P0, P1, P2, P3, P4, ...] defines edges P0P1, P1P2, P2P3, P3P4, etc.

    Call draw-line with consecutive points in the list.

    Transformations can be applied to the edge list before drawing.

    Storing the edge list
        Each point has 3 floating point components x, y, z.

        Points can be stored in a 4 x n matrix.
            [  x0  x1  x2  ...  xn  ]
            [  y0  y1  y2  ...  yn  ]
            [  z0  z1  z2  ...  zn  ]
            [  1.0 1.0 1.0 ...  1.0 ]


    Matrix Math Review
        Scalar multiplication
            5 x [ a b ] = [ 5a 5b ]
                [ c d ] = [ 5c 5d ]
                
        Matrix multiplication
            A: m x n matrix
            B: n x p matrix
            AB: m x p matrix
            
            Columns in first must match rows in second.

            In order to multiply a transformation matrix T with an edge matrix,
            T must be a 4 x 4 matrix.

            [ a b c ] [ g h ] = [ (ag + bi + ck) (ah + bj + cl) ]
            [ d e f ] [ i j ]   [ (dg + ei + fk) (dh + ej + fl) ]
                      [ k l ]

            (AB)_ij = Σ(A_ik x B_kj)

        Multiplicative identity
            I_n is the n x n identity matrix

            Given M, an m x n matrix I_m * M = M = M * I_n.

            If m = n, then multiplication by the identity is commutative.

            I is always square, with the principal diagonal containing all
            1s and the rest of the matrix all 0s.

            I_4 = [ 1 0 0 0 ]
                  [ 0 1 0 0 ]
                  [ 0 0 1 0 ]
                  [ 0 0 0 1 ]
            
        Inverse
    
03/01/2017
    Transformations
        Translation
                       T(a, b, c)
            (x, y, z) -----------> (x + a, y + b, z + c)

            [ 1 0 0 a ] [ x ] = [ x + a ]
            [ 0 1 0 b ] [ y ]   [ y + b ]
            [ 0 0 1 c ] [ z ]   [ z + c ]
            [ 0 0 0 1 ] [ 1 ]   [   1   ]
            
        Scale
                       S(a, b, c)
            (x, y, z) -----------> (ax, by, cz)

            [ a 0 0 0 ] [ x ] = [ ax ]
            [ 0 b 0 0 ] [ y ]   [ by ]
            [ 0 0 c 0 ] [ z ]   [ cz ]
            [ 0 0 0 1 ] [ 1 ]   [  1 ]
        
        Rotation
                       R(A, axis)
            (x, y, z) ---------------> (?, ?, ?)

            Rotate (x, y, 0) at angle B from x-axis A around the z-axis

                x = r cos B
                y = r sin B
                x1 = r cos (B + A)
                   = r cos B cos A - r sin B sin A
                   = x cos A - y sin A
                y1 = r sin (B + A)
                   = r sin B cos A + r cos B sin A
                   = x sin A + y cos A

                           R(A, z)
                (x, y, z) --------> (x cos A - y sin A, x sin A + y cos A, z)

                [ (cos A) (-sin A) 0 0 ] [ x ] = [ x cos A - y sin A ]
                [ (sin A)  (cos A) 0 0 ] [ y ]   [ x sin A + y cos A ]
                [    0        0    1 0 ] [ z ]   [         z         ]
                [    0        0    0 1 ] [ 1 ]   [         1         ]


            Rotate (0, y, z) at angle B from y-axis A around the x-axis

                y = r cos B
                z = r sin B
                y1 = r cos (B + A)
                   = r cos B cos A - r sin B sin A
                   = y cos A - z sin A
                z1 = r sin (B + A)
                   = r sin B cos A + r cos B sin A
                   = y sin A + z cos A

                           R(A, x)
                (x, y, z) --------> (x, y cos A - z sin A, y sin A + z cos A)

                [ 1    0        0    0 ] [ x ] = [         x         ]
                [ 0 (cos A) (-sin A) 0 ] [ y ]   [ y cos A - z sin A ]
                [ 0 (sin A)  (cos A) 0 ] [ z ]   [ y sin A + z cos A ]
                [ 0    0        0    1 ] [ 1 ]   [         1         ]


            Rotate (x, 0, z) at angle B from x-axis A around the y-axis

                x = r cos B
                z = r sin B
                x1 = r cos (B + A)
                   = r cos B cos A - r sin B sin A
                   = x cos A - z sin A
                z1 = r sin (B + A)
                   = r sin B cos A + r cos B sin A
                   = x sin A + z cos A

                           R(A, y)
                (x, 0, z) --------> (x sin A + z cos A, 0, x cos A - z sin A)

                [ (sin A) 0  (cos A) 0 ] [ x ] = [ x sin A + z cos A ]
                [    0    1     0    0 ] [ y ]   [         y         ]
                [ (cos A) 0 (-sin A) 0 ] [ z ]   [ x cos A - z sin A ]
                [    0    0     0    1 ] [ 1 ]   [         1         ]

            Can compound any of the above with a translation to translate an
            arbitrary point

03/02/2017
    Combining Transformations
        S, T, R, E0
        S * E0 = E1
        D * E1 = E2
        T * E2 = E3

        E3 = T * D * S * E0
           = (T * D * S) * E0

03/09/2017
    Parametric Equations
        Describe curves in such a way that x, y, and z depend on another
        independent variable t.

        x = f(t) = x0 + (Δx)t
        y = g(t) = y0 + (Δy)t
        t ∈ [0, 1]

03/10/2017
    Splines
        Hermite Curves
            Goal: at^3 + bt^2 + ct + d
            Problem: Givens are not coefficients, but P0, P1, M0, M1

            f(t) = at^3 + bt^2 + ct + d (points on the curve)
            f'(t) = 3at^2 + 2bt + c (slope at each point)

            f(0) = d (P0)
            f'(0) = c (M0)

            f(1) = a + b + c + d (P1)
            f'(1) = 3a + 2b + c (M1)

                 H     *  C   =    G
            [ 0 0 0 1 ] [ a ] = [ P0 ]
            [ 1 1 1 1 ] [ b ]   [ P1 ]
            [ 0 0 1 0 ] [ c ]   [ M0 ]
            [ 3 2 1 0 ] [ d ]   [ M1 ]

              C   =       H^-1      *  G
            [ a ] = [  2 -2  1  1  ] [ P0 ]
            [ b ]   [ -3  3 -2  1  ] [ P1 ]
            [ c ]   [  0  0  1  0  ] [ M0 ]
            [ d ]   [  1  0  0  0  ] [ M1 ]

03/13/2017
    Bezier Curves
        Given: endpoints P0, P3
               control points P1, P2

        Linear Bezier Curves
            P(t) = (1 - t)P0 + tP1

        Quadratic Bezier Curves
            M0, M1 linear between P0, P1, P2
            P(t) linear between M0, M1
            M0 = (1 - t)P0 + tP1
            M1 = (1 - t)P1 + tP2
            P(t) = (1 - t)M0 + tM1
            P(t) = (1 - t)((1 - t)P0 + tP1) + t((1 - t)P1 + tP2)
            P(t) = (1 - t)^2 * P0 + 2t(1 - t)P1 + t^2 * P2

        Cubic Bezier Curves
            M0, M1, M2 linear between P0, P1, P2, P3
            P(t) quadratic between M0, M1, M2
            M0 = (1 - t)P0 + tP1
            M1 = (1 - t)P1 + tP2
            M2 = (1 - t)P2 + tP3
            P(t) = (1 - t)^2 * M0 + 2t(1 - t)M1 + t^2 * M2
            P(t) = (1 - t)^2 * ((1 - t)P0 + tP1) +
                   2t(1 - t)((1 - t)P1 + tP2) +
                   t^2((1 - t)P2 + tP3)
            P(t) = (1 - t)^3 * P0 + 3t(1 - t)^2 * P1 + 3t^2(1 - t) * P2 + t^3 * P3

            OR

            N0 quadratic between P0, P1, P2
            N1 quadratic between P1, P2, P3
            P(t) linear between N0, N1
            N0 = (1 - t)^2 * P0 + 2t(1 - t)P1 + t^2 * P2
            N1 = (1 - t)^2 * P1 + 2t(1 - t)P2 + t^2 * P3
            P(t) = (1 - t)N0 + tN1
            P(t) = (1 - t)((1 - t)^2 * P0 + 2t(1 - t)P1 + t^2 * P2) +
                   t((1 - t)^2 * P1 + 2t(1 - t)P2 + t^2 * P3)
            P(t) = (1 - t)^3 * P0 + 3t(1 - t)^2 * P1 + 3t^2(1 - t)P2 + t^3 * P3

            P(t) = (-P0 + 3P1 - 3P2 + P3)t^3 + (3P0 - 6P1 + 3P2)t^2 + (-3P0 + 3P1)t + P0
                              a                        b                    c          d

            [ -1  3 -3  1  ] [ P0 ] = [ a ]
            [  3 -6  3  0  ] [ P1 ]   [ b ]
            [ -3  3  0  0  ] [ P2 ]   [ c ]
            [  1  0  0  0  ] [ P3 ]   [ d ]
            
03/22/2017
    Rectangular Prism
        Given: one vertex, width, height, depth
        Defining points: vertices
        Generate by drawing lines between vertices

    Sphere
        Given: center, radius
        Defining points: surface points
        Generate by rotating circle about x or y axis
        
        [     1        0        0    ] [ r cos A ]   [    r cos A    ]
        [     0     (cos B) (-sin B) ] [ r sin A ] = [ r sin A cos B ]
        [     0     (sin B)  (cos B) ] [    0    ]   [ r sin A sin B ]
                x-rotation             circle            sphere

        A from 0 to 2pi
        B from 0 to pi

    Torus
        Given: center, circle radius, torus radius
        Defining points: surface points
        Generate by rotating a translated circle about the x or y axis
            Translate in x -> rotate about y and vice versa

        [  (cos B)    0    (sin B) ] [ r cos A + R ]   [  r cos A cos B + R cos B ]
        [     0       1       0    ] [   r sin A   ] = [          r sin A         ]
        [ (-sin B)    0    (cos B) ] [      0      ]   [ -r cos A sin B - R sin B ]

        A from 0 to 2pi
        B from 0 to 2pi

03/30/2017
    Wireframe Meshes
        Defining points connected by lines
        Can easily create lines from generated points
        Edge list can store all their lines
        Connecting points can be complicated
        Cannot be filled in to create a solid object

    Polygon Meshes
        Defining points are used as vertices for polygons (triangles)
        Can fill in each polygon
        Lighting and shading can be seen
        Generating polygons can be difficult
        Need to store polygons, not edges
        
        Add 3 points at a time to a polygon list
        Points must be added counterclockwise

03/31/2017
    how many points per slice? n = 11
    semicircles or regular circles? semicircles
    point i, i + 1, i + 11 = i + n, i + 12 = i + n + 1
                        
04/19/2017
    Relative Coordinate System
        Transformations modify the coordinate system
        When drawing, always apply the current transformation
        Each object can be independently drawn
        We can explicitly define related objects
    
04/20/2017
    Relative Coordinate System (cont'd.)
        Maintain a stack of coordinate systems
            push: add a (deep) copy of the top to the stack
            pop
        All transformations are immediately applied to the top of the stack
        Drawing commands:
            1. Generate a polygon list
            2. Apply the top coordinate system
            3. Draw to the screen
            4. Clear the polygon list
