public class KnightTour{

    private int[][] _board;
    private int _n;

    // Creates a 8x8 board.
    public KnightTour(){
	// Your code goes here
    }
    // Creates a n x n board
    public KnightTour(int n){
	// Your code goes here
    }

    // Attempts to solve the knight's tour starting at position 0,0.
    // Calls solve(int,int).
    public void solve(){
	
    }
    // postcondition: returns true if the knight's tour is completed.
    //                false otherwise
    private boolean solve(int x, int y){
	try {
	    Thread.sleep(1000);                 //1000 milliseconds is one second.
	} catch(InterruptedException ex) {
	    Thread.currentThread().interrupt();
	}
	// Your code goes here.
    }

    public String toString(){
	String ans = "";
	for (int i = 0; i < _board.length; i++){
	    for (int j = 0; j < _board[i].length; j++){
		ans += _board[i][j] + " ";
	    }
	    ans += "\n";
	}
	return ans;
    }

    public static void main(String [] args){
	int N = Integer.parseInt(args[0]);
	KnightTour t = new KnightTour(N);
	t.solve();
	System.out.println(t);
    }


    
}
