Due: Thurs. 1/7
=============

Part I:
=======
Write the free method merge(List<Integer> x, List<Integer> y).
Assume lists x and y are sorted in ascending order, merge returns a sorted
list by merging the lists x and y.

The method should not produce any side effects and perform in O(n).

example: merge([0,1,3,3,10], [2,5,8]) -> [0,1,2,3,3,5,8,10]

public static List<Integer> merge(List<Integer> x, List<Integer> y){


}


Part II: Practice with interfaces and Polymorphism. (Answers at the bottom).
=======

Given:

Flier.java
===========
  public interface Flier{
    void fly();
  }

Athlete.java
============
 public interface Athlete{
   void train(double hours);
 }


Airplane.java
=============
public class Airplane implements Flier{
     public void fly(){
      System.out.println("Using my jet engines to fly");
     }
 }

SkiJumper.java
==============
public class SkiJumper implements Flier, Athlete{
     // instance variables
     private String _firstName, _lastName;
     private double _hoursTraining;
     private int _numberOfJumps;

     // constructor
     public SkiJumper(String firstName, String lastName){
     	    _firstName = firstName;
	    _lastName = lastName;
	    _hoursTraining = 0.0;
	    _numberOfJumps = 0;
     } 

     public void fly(){
     	    System.out.println("Using skis to take " + _firstName + " " +
                                _lastName + " into the air.");
     }

     public void train (double hours){
           System.out.println("I am on the slopes for " + hours + " hours
                               per day.");
     }

     publc double getHoursTrained(){
          return _hoursTraining;
     }

     public int getJumps(){
             return _numberOfJumps;
     }
   }

1. Which of the following code segments causes a compile-time error?
   a. Airplane boeing707 = new Airplane();
  *b. Flier boeing707 = new Flier();
   c. Flier boieing707 = new Airplane();
   d. Airplane boeing707 = new Airplane();
      Flier airTraveler = boeing707;
   e. Airplane boeing707 = new Airplane();
      Flier airTraveler;
      airTraveler = (Airplane)boeing707;

2. Consider the following code segment.
  
  1   Airplane skyRider = new Airplane();
  2   Flier skyRider2 = skyRider;
  3   Athlete skyRider3 = (Athlete) skyRider2;
  4   Airplane skyRider4 = (Airplane) skyRider2;
  5   Flier skyRider5 = skyRider4;

 Which statement above will cause a run-time error and throw an exception?
 a. Statment 1
 b. Statment 2
*c. Statment 3
 d. Statment 4
 e. Statment 5
 
Questions 3 and 5 refer to the following declarations:

   Airplane c = new Airplane();
   Flier f = new Airplane();
   Athlete a = new SkiJumper("Ann","Smith");	
   SkiJumper s = new SkiJumper("John", "Doe");

3. Which of the following statements is not legal?

  a. c.fly();
  b. f.fly();
  c. a.trian(3);
  d. s.train(3);
 *e. a.fly();

4. Which of the following statements needs a cast?
   I. f = c;
   II. a = s;
   III. s = a;

   a. I only
   b. II only
  *c. III only
   d. I and II only
   e. I and III only












Answers: 1.b 2.c 3. e 4. c
