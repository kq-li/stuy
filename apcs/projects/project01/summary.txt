Project 01 - Kenneth Li

The Java class Project01 interactively presents solutions to each of the problems, reading from System.in using the Scanner class and interpreting the data. The following data represents the terminal output of Project01 upon requesting all solutions in order.

Problem number (q to quit): 1
Link prob in percent: 80
Jump prob in percent (should be 100 - linkProb): 20
Data file: tiny.txt

Transition matrix of tiny.txt using linkProb 0.80 and jumpProb 0.20:

5 5
0.0400000000 0.8400000000 0.0400000000 0.0400000000 0.0400000000 
0.0400000000 0.0400000000 0.3600000000 0.3600000000 0.2000000000 
0.0400000000 0.0400000000 0.0400000000 0.8400000000 0.0400000000 
0.8400000000 0.0400000000 0.0400000000 0.0400000000 0.0400000000 
0.4400000000 0.0400000000 0.4400000000 0.0400000000 0.0400000000 

Problem number (q to quit): 2
Data file: tiny.txt

Transition matrix of tiny.txt ignoring duplicate links:

5 5
0.0200000000 0.9200000000 0.0200000000 0.0200000000 0.0200000000 
0.0200000000 0.0200000000 0.3200000000 0.3200000000 0.3200000000 
0.0200000000 0.0200000000 0.0200000000 0.9200000000 0.0200000000 
0.9200000000 0.0200000000 0.0200000000 0.0200000000 0.0200000000 
0.4700000000 0.0200000000 0.4700000000 0.0200000000 0.0200000000 

Problem number (q to quit): 3
Data file: tiny.txt

Transition matrix of tiny.txt compensating for pages with no links:

5 5
0.0200000000 0.9200000000 0.0200000000 0.0200000000 0.0200000000 
0.0200000000 0.0200000000 0.3800000000 0.3800000000 0.2000000000 
0.0200000000 0.0200000000 0.0200000000 0.9200000000 0.0200000000 
0.9200000000 0.0200000000 0.0200000000 0.0200000000 0.0200000000 
0.4700000000 0.0200000000 0.4700000000 0.0200000000 0.0200000000 

Problem number (q to quit): 4

RandomSurfer.java fails if the probabilities in p[page] do not sum to 1. This problem occurs due to the possibility of Math.random() returning a number greater than the sum of p[page], resulting in page defaulting to 0. This behavior can be rectified by calculating the sum of the probabilities in p[page] and adding p[page][j] divided by that sum to the sum counter.

Problem number (q to quit): 5

RandomSurfer.java requires 10,000 iterations to calculate page ranks to four decimal places and 100,000 iterations to calculate page ranks to five decimal places for tiny.txt.

Problem number (q to quit): 6

Markov.java requires 2 iterations to calculate page ranks to 3 decimal places, 3 iterations to calculate page ranks to 4 decimal places, and 8 iterations to calculate page ranks to 10 decimal places.

Problem number (q to quit): 7

Adding links to page 23 from all other pages in medium.txt (see medium7.txt) results in a higher rank for page 23 due to higher likelihoodof moving to page 23 from any other page, increasing the fraction of linksto page 23.

Problem number (q to quit): 8

Adding links from page 23 to all other pages in medium.txt (see medium8.txt) results in a lower rank for page 23 due to higher likelihood of moving to any other page from page 23, diluting the links so that a smaller fraction link to page 23.

Problem number (q to quit): 9

Adding a link from 23 to any page that links back to 23 in any number of steps increases the page rank of 23 because the probability of 23 being accessed through links therefore increases (medium09.txt has extra link 23 12).

Problem number (q to quit): 10

Adding a link from 23 to any page increases the page rank of that page because the concentration of links, and therefore the probability of navigating to that page, increases (medium10.txt has extra link 23 22).

Problem number (q to quit): 11

Page rankings of 8pages.txt through 1000000 iterations of RandomSurfer:

8 8
 0  0.1006050000
 1  0.1029410000
 2  0.0637110000
 3  0.1645520000
 4  0.0306720000
 5  0.2016850000
 6  0.1222850000
 7  0.2135490000


Problem number (q to quit): 12

Page rankings of 8pages.txt through 100 iterations of Markov:

8 8
 0  0.1005509373
 1  0.1029958435
 2  0.0635461670
 3  0.1646294976
 4  0.0310392518
 5  0.2016342679
 6  0.1222992707
 7  0.2133047642


Problem number (q to quit): 13
Data file: tiny.txt

Page rankings of tiny.txt using repeated squaring:

5 5
 0  0.2730292888
 1  0.2657263599
 2  0.1461853247
 3  0.2472282818
 4  0.0678307448


Problem number (q to quit): 14
Page count: 5 
Link count: 20

Random page network with 5 pages and 20 links:

 0  1    0  2    0  4    0  4    0  4   
 1  0    1  2    1  2    1  3   
 2  4   
 3  2    3  2    3  2   
 4  1    4  1    4  1    4  2    4  2    4  2    4  2   


Problem number (q to quit): 15
Page count: 10
Link count: 50
Hub count: 1
Authorities count: 2

Hubs, which come right after basePages and before authorities, seem to rank higher than authorities due to the fact that hubs generate self-traffic, while authorities mainly generate traffic for other pages.

Base pages: 0-9
Hubs: 10-10
Authorities: 11-12

 0  0.0036807152
 1  0.0084609896
 2  0.0172690713
 3  0.0112249168
 4  0.0081706548
 5  0.0147713224
 6  0.0042975119
 7  0.0096682352
 8  0.0034019520
 9  0.0039864417
10  0.0024029061
11  0.0006996200
12  0.0006996200


Problem number (q to quit): 16

The following sequence of links results in page 2 being higher ranked page 1, despite 4 links pointing to page 1 and only 3 to page 2.
 0  1    0  1   
 1  2   
 2  0   
 3  1    3  2   


 0  0.3209783495
 1  0.3251560799
 2  0.3288655706
 3  0.0250000000


Problem number (q to quit): 17
Data file: tiny.txt
Surfer trials: 1000000
Markov trials: 100

Average hitting time of a random surfer in tiny.txt over 1000000 moves compared to reciprocal of page ranks through 100 iterations of Markov:

Random surfer hit times:
 0  2.1630520000
 1  1.1984140000
 2  4.2353900000
 3  1.1938080000
 4  14.0996180000

Calculated hit times:
 0  3.6626107201
 1  3.7632698553
 2  6.8406319303
 3  4.0448446783
 4  14.7425773254


Problem number (q to quit): 18
Data file: tiny.txt
Trials: 100

Average moves before crossing path in tiny.txt over 100 random surfs: 15.5

Problem number (q to quit): 19
Data file: medium.txt
Trials: 100

Circles representing page ranks in medium.txt over 100 iterations of Markov:
0  0.05 0.95 0.00
1  0.15 0.95 0.01
2  0.25 0.95 0.01
3  0.35 0.95 0.00
4  0.45 0.95 0.00
5  0.55 0.95 0.01
6  0.65 0.95 0.04
7  0.75 0.95 0.01
8  0.85 0.95 0.01
9  0.95 0.95 0.03
10  0.05 0.85 0.00
11  0.15 0.85 0.02
12  0.25 0.85 0.00
13  0.35 0.85 0.03
14  0.45 0.85 0.01
15  0.55 0.85 0.03
16  0.65 0.85 0.02
17  0.75 0.85 0.00
18  0.85 0.85 0.01
19  0.95 0.85 0.02
20  0.05 0.75 0.00
21  0.15 0.75 0.02
22  0.25 0.75 0.04
23  0.35 0.75 0.03
24  0.45 0.75 0.01
25  0.55 0.75 0.00
26  0.65 0.75 0.00
27  0.75 0.75 0.00
28  0.85 0.75 0.02
29  0.95 0.75 0.00
30  0.05 0.65 0.02
31  0.15 0.65 0.01
32  0.25 0.65 0.01
33  0.35 0.65 0.01
34  0.45 0.65 0.02
35  0.55 0.65 0.01
36  0.65 0.65 0.00
37  0.75 0.65 0.02
38  0.85 0.65 0.01
39  0.95 0.65 0.01
40  0.05 0.55 0.02
41  0.15 0.55 0.01
42  0.25 0.55 0.01
43  0.35 0.55 0.01
44  0.45 0.55 0.01
45  0.55 0.55 0.00
46  0.65 0.55 0.02
47  0.75 0.55 0.02
48  0.85 0.55 0.01
49  0.95 0.55 0.01

(StdDraw not shown, use command line to see)


The code is straightforward to use: run java Project01 and input data when prompted. Solutions/results will then be sent to standard output.

The results from the problems generally supported each other and allowed me to more fully understand the reasoning and functionality of the PageRank model. Many of the results were consistent with my intuition, such as what would happen to the ranking of a page with 49 more links pointing to it. Also, the StdDraw question was a nice touch as a wrap-up problem.

Some difficulties were encountered in the main Project01 class; the given StdIn class could not read from a file, so I used a Scanner class to do that, and then another to read from standard input for consistency's sake. Also, the slightly-modular/refactored version presented here is the result of hours of effort of parsing chunks of code that were nearly the same, but different enough to be a pain to refactor into separate functions - the switch statement in the main function is just one example of clunky, but functional code. (Note that there may be some slight visual/user experience bugs with the CLI, as runtime exceptions cause the main loop to break but still present the problem-number prompt.)
