09/13/2016
  Aim: Take a trip down memory lane
  Do Now: In small groups (~4), discuss some of the similarities and differences
          between Java and Python.

09/14/2016
  Aim: Git up! Git on up!
  Do Now: Go to the workshop page on github

09/19/2016
  Aim: What are we keeping in that flask?
  Do Now: In your discussion groups, recall what things were necessary to
          write web based programs in python.

  Softdev toolbox part 1:
    python 2.7
    pip
      Python package manager
      Basic usage: $ pip install <package>
    virtualenv
      Creates a sandbox for your python environment.
      Allows you to maintain a specific python environment without messing with
      the system version.
      Can install packages wiwthout root access to a system.
    flask
      "Microframework" for developing web applications.
      Has its own development web server (no more public_html).
      Contains the following two modules
        werkzeug
          WSGI (Web Server Gateway Interface) implementation.
          Allows our web apps to respond to web requests.
        jinja2
          HTML template engine.
          Easily create multiple pages that share styles and content.

09/20/2016
  Aim: There's a webserver in my flask?
  Do Now: Write a python function that simply prints a message
          to standard out. Then call the function in the same program.

09/21/2016
  Aim: HTML Jinja Warrior
  Do Now: Write a basic HTML file with the correct headers and sections.
          
  HTML Templates (jinja2)
    Takes a lot of the HTML out of your python code.
    Template files must be stored in a templates directory at the same level
    as your Flask app file.

    render_template(file, var1, var2, ...)
      Flask function to take a template file and return it as a string
      Jinja2 has its own language to make templates more powerful

09/26/2016
  Aim: Your desktop might not be organized, but your code will be!

  Example Flask Organization
    flask-app/
      app.py      the actual flask application
      templates/  all your templates
      utils/      extra python modules
      data/       data files

09/27/2016
  Aim: Flask: serving artisanal web pages since 2010

  File paths and the flask server
    When a flask app runs, the directory where the flask file exists
    is considered the root directory of the web server.

    The flask web server is configured to serve pages only when:
      1   The requested page is a route in the flask app
      2   The requested page/resource is in the static directory

    All these considerations are based on using Flask's built in webserver
    and are valid during development. When deploying on an existing webserver
    (apache2, nginx), these settings may be different.

09/28/2016
  Aim: Requesting assistance
  Do Now: Write an html file that contains a form with a single text box
          and a submit button.

          Write a flask app where the root route renders the
          html form as a template.

09/29/2016
  Aim: Don't forget to include POSTage
  Do Now: Open up your form flask app from yesterday.
  
  Request object
    Stores information about incoming requests.

    Notable fields
      request.headers
        HTML headers sent from the browser
      request.method
        The request method (GET or POST)
      request.args
        The arguments in a query string from a GET request
      request.form
        The arguments sent in a POST request

      request.args and request.form are immutable

10/05/2016
  Aim: C is for Cookie, but Sessions are Secure

  Cookies
    Cookies are files that websites will save to your web browser to store
    information on a local machine.

    They are useful for keeping track of persistent information, like
    login credentials.

  Sessions
    Flask sessions are securely signed cookies.

    Since they are encrypted, they cannot be modified by the user of the
    local machine.

    The session object works exactly like a dictionary
      Add data to a session:
        session[<key>] = <data>
      Remove data from a session:
        session.pop(<key>)

    To encrypt a session, set a private key in the app:
      app.secret_key = <private key>

      A good way to get random data: os.urandom(32) returns 32 bits of random
      data as a string

      Never publish the secret key in a public place (GitHub)!!

10/06/2016
  Aim: Url binding is the

  url_for
    Flask function that will build the correct url for a particular function.

    Syntax: url_for(<function>)

  redirect
    Flask function that will redirect a call to one route to a
    different response.

    Often used in combination with url_for.

    Example: return redirect(url_for('login'))

10/13/2016
  Aim: All your data are belong to us

  Relational database
    Database that stores information as a collection of tables.

    Field: Column data in a relational DB
    Record: Row in an RDB

    Data can be linked between tables based on field values.

  SQL (Structured Query Language)
    Standard language designed to work with relational databases.

    SQL is used for many major db programs, though the implementations
    may not be (mostly are not) compatible.

    MySQL, PostgreSQL, SQLite, Oracle are different SQL implementations

  SQLite
    SQL implementation that relies entirely on function calls in the parent
    program. There is no database server.

    All database information is stored in a single file.

    Data is dynamically typed as values are inserted into a table.

  Basic SQLite Operations
    CREATE TABLE <name> (<column name> <data type>, ...)
      Add a table to a database

      The data type will help to convert entered values to a suggested type.
        TEXT, INTEGER, REAL, NUMERIC, BLOB
          NUMERIC defaults to an integer, but can also be a floating point.
          BLOB means no suggested type.

        Columns can be given a PRIMARY KEY attribute, denoting that every entry
        in that column is unique and cannot be NULL.

        Columns can be given a NOT NULL attribute, denoting that no entry can
        be NULL.

    INSERT INTO <table name> VALUES (<field1>, <field2>, ...)
      Insert record into table, matching respective values.

    SELECT <column> FROM <name>

  SQLite Shell Commands
    .quit
    .tables
    .header on|off
    .mode column|csv|list|html|insert|line|tabs

10/17/2016
  Aim: SQLite, the low-fat alternative to SQL
      
  python sqlite module
    import sqlite3

    connect
      Open/create an sqlite database.

      If the database does not exist, create it.

      db = sqlite3.connect(<db name>)

    cursor
      Create a database cursor object that will allow
      you to perform operation on the database.

      c = db.cursor()

    execute
      Cursor method to perform the provided SQL operation, given as a string.
  
      c.execute(<SQL query>)

  SQL SELECT statement
    Used to get data from a database.

    Creates a results table based on the query.

    SELECT <column 1>, ... FROM <table 1>, ...;
      Returns a new table containing only the requested columns from
      the request tables.

      SELECT name FROM students;

10/18/2016
  Aim: WHERE did I put that data?

  Do Now: Using the database from the last assignment, write SELECT
          statements to do the following:

          1. Generate a table containing course codes and grades
          2. Generate a table with student names, ids, and grades

  WHERE
    Allows you to put restrictions on the results of a SELECT statement.

    SELECT * FROM courses WHERE mark < 65;

11/01/2016
  Aim: Extending your template knowledge.

  Do Now: Write a flask app with a single route and a simple HTML template.

  Extending HTML templates
    Any template can be "inherited" by others.

    To extend a template: {% extends "<TEMPLATE>" %}

    You can define sections to override inside:
      {% block <NAME> %}
      {% endblock %}

11/15/2016
	Aim: Stuylin'

	Cascading Style Sheets (CSS)
		Created to separate the presentation of an HTML/XML page and its content.
		Basic syntax:
			<PROPERTY>: <VALUE>;

			color: lightsteelblue;
			text-align: center;
			border: 10px;

		There are 3 ways to incorporate CSS into a page: inline, internal
		stylesheet, and external stylesheet.

		Inline CSS
			Add CSS to the style attribute of a tag

			<TAG style="<CSS>">

			<p style="color: green; font-size: 2em">...</p>

		Internal Style Sheet
			Add a <style> element to the <head> section of the page.
			Include all your CSS inside the <style> block.

			Internal and external style sheets require the addition of a selector
			so that it is clear which element you are styling.

			<SELECTOR> {
				<CSS>
			}

			h1 {
				color: #FF00FF;
			}

		External Style Sheet
			Create a separate .css file the contains all your CSS.
			It cannot contain any other kind of code, including HTML or XML.

			Include a link to the CSS file inside the <head> block.

			<head>
				<link rel="stylesheet" type="text/css" href="<PATH>">
			</head>

		Styles will generally be inherited by elements inside other elements.
			body {
				color: green;
			}

			h1 {
				position: fixed;
				top: 10px;
			}
				
			h1 elements will be green.

11/17/2016
	Aim: Stay classy, CSS.

	<div> tag
		divs are container elements whose sole purpose is to define a section on
		the page that should be considered one group.

	class attribute
		All HTML elements can have a class attribute. It is an identifier that can
		be applied to multiple elements.
			<div class="navbar">
			<h2 class="new_chapter bold">

		Classes can be used as CSS selectors by putting a . before the class name.
			.new_chapter {
				font-family: "Times New Roman", Times, serif;
				text-align: center;
			}

	id attribute
		All HTML attributes can have an id attribute. It is an identifier that
		should only be applied to a single element.
			<div id="main_content">

		id names can be used in <a> tags as the href target.
			<a href="#main_content">

		ids can be used as CSS selectors by putting a # before the id name.
			#main_content {
				border: 2px solid goldenrod;
			}

11/28/2016
	Aim: After being framed, you might need to take a REST

	Tips for using frameworks
		Many files have .min equivalents, which contains the same code without any
		extra formatting.

		jQuery is a popular JavaScript library used in many frameworks.

		The order in which you include JavaScript files is important.

		JavaScript in <head> or at the end of <body>?
			Yet another programmer holy war

			<head>
				Advantages
					Scripts will definitely be loaded before anything else, so page
					elements that need scripting will be attached

				Disadvantages
					Loading scripts will take longer and the entire page will be delayed

			<body>
				Advantages
					Page content loads much faster

				Disadvantages
					Page might be fully loaded while script files continue to be
					downloaded and parsed

	REST APIs
		API (Application Program Interface)
			A published set of protocols that can be used to have your program interact
			with another program/service.

		REST (REpresentational State Transfer)
			APIs that transmit data back after receiving an HTTP[S] request.

			Returned data can be in various formats: HTML, XML, JSON, etc.

			JSON (JavaScript Object Notation)
				Standard way of representing data. Can be easily translated into a
				python dictionary.

11/29/2016
	Aim: Web crawling pythons

	Making and parsing a REST call in Python
		urllib2
			Library to handle URLs

			u = urllib2.urlopen(url)
				Opens a URL to be read by your program.

				u.geturl()
					Returns the actual URL (in case of redirects).

				u.info()
					Returns the HTTP[S] header information.

				u.read()
					Returns the contents of the target webpage.
		json
			Library to work with JSON data.

			d = json.loads(s)
				Turns a JSON object string into a dictionary.

			s = json.dumps(d)
				Turns a Python dictionary into a JSON object string.

12/13/2016
	Aim: Learning to write in script

	JavaScript
		Programming language originally designed to augment HTML and be run locally
		on a web browser.

		No direct relationship with Java, though similar in syntax.

		Dynamically typed - variable types are provided at runtime (like python).

		Most development will be done through a web browser's console.

		console.log()
			Displays a string to the console. (There is no builtin i/o.)

		C-style syntax

		Variable basics
			var x = 4;
			var s = 'hello';
			var l = [4, 3, 19];
			var o = {'a': 10, 'x': 'hello'};

	Document Object Model (DOM)
		JavaScript derives most of its utility through being able to interact with
		HTML and XML documents.

		The DOM is an API for interacting with HTML. It provides a structure that
		we can interact with and can be manipulated by functions.

		Pages are represented as trees.

		Selecting HTML elements
			document.getElementById(<ID>)
			document.getElementsByTagName(<tag>)
			document.getElementsByClassName(<class>)
			
12/14/2016
	Aim: Functional code

	More DOM
		Manipulating DOM elements
			<element>.remove()
			<element>.innerHTML
			document.createElement(<tag>)
			<element>.appendChild(<parent>)
			<element>.setAttribute(<name>, <value>)
			<element>.getAttribute(<name>)
			<element>.addEventListener(<event>, <function>)
	Functions in JavaScript
		JavaScript is functional, like Scheme (Racket).

		Functions are first class objects that can be used like any other value.

		function () creates anonymous functions (like lambda).

		function () {
			console.log('yo');
		};

		var foo = function () {
			console.log('yo');
		};

01/11/2017
	Aim: Defeating the Trojans with the help of Ajax

	Asynchronous JavaScript and XML (AJAX)
		System created to send data to a server in the background of the page
		without having to reload the page or wait for the server to acknowledge
		the change.

		It is a combination of technologies, including JS, HTML, DOM, and XML.

		AJAX calls can send data to a server using GET or POST (for example) and
		catch the data sent by the server in response.

		Originally, XML was the only supported format for sending/receiving data,
		but now many formats are used, including JSON and plaintext.

		AJAX calls can be made via the XMLHttpRequest JavaScript object.

		Using JQuery for AJAX
			The JQuery library provides clean wrapper functions for making AJAX calls.

			$.ajax(<settings>);
				settings
					An associative array containing all the information required to make
					the given AJAX call.

					Notable keys
						url
							Server target link.

						type
							Method (POST/GET).

						data
							Data to be sent.

						success
							Function to be called if the server responds.

							This function can take an argument if the server sends data in 
							the response.

				$.ajax({
					url: '/foo',
					type: 'GET',
					data: 'look it\'s information!',
					success: function (data) {
						console.log(data);
					}
				});

		JQuery also has HTTP request wrappers.
			$.get(<url>, <callback function>);
			
			$.post(<url>, <callback function>);
		
