09/14/2016
  Aim: Variables are the spice of life.
  Do Now: What are the primitive variable types in Java?

  C primitives:
  int         4B        -2^31 to 2^31 - 1    ~2.1b
  short       2B        -2^15 to 2^15 - 1    32768
  long        8B        -2^63 to 2^63 - 1    big
  char        1B        -2^7 to 2^7 - 1      256

  float       4B        7 digits of precision
  double      8B        14 digits of precision

  All primitives in C are numeric - the only differences between them are floating
  point vs integer and size of variable.

  Size can be platform-dependent.
  sizeof(<TYPE>) can be used to find the size in bytes
    ex: sizeof(int)

09/13/2016
  Aim: Don't forget to read the fine print
  Do Now: What is the smallest variable type that could be used to store the
          following values (using standard sizes)?

  1) 5 - char
  2) -30,000 - long
  3) 255 - int
  4) 5,000,000,000 - long

  C Primitive Variable Types
    All boolean values are numbers
      0 -> false
      anything else -> true

  printf
    The most important C function!

    Prints formatted strings

    printf(<string literal>, [<var1>, <var2>, ...])

09/19/2016
  Aim: A vast array of possibilities
  Do Now: Turn to your neighbors and discuss the things that came up
          while you were working on the euler assignment. What did you
          find surprising or confusing, helpful or harmful?

09/20/2016
  Aim: What's the point of it all?
  Do Now: Declare a regular variable and an array in a C program.
          Then print out the size of each.

  Pointers - Now the fun really starts
    Variables designed to store memory addresses (think references in java)
    * is used to declare a variable as a pointer type
      int *p
      double *q
      char *r
      
09/21/2016
  Aim: Try not to hurt yourself, the point is sharp.

  More Pointer Fun
    Pointer arithmetic
      Declaring a pointer as a specific type allows you to add to and subtract
      from the pointer by the size of its associated type.

        int *ip;
        long *lp;
        ip++; // adds 4 to ip
        lp++; // adds 8 to lp

      Pointer arithmetic only works with + and - of integers.
    Array variables are immutable pointers.

    De-reference
      * is also used as the de-reference operator. It accesses the value at the
      memory location stored in a pointer

        int i = 5;
        int *ip = &i;
        *ip++; // this sets i to 6

      Dereferencing takes priority over most operations, barring only ++/--.

