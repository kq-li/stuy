09/14/2016
  Aim: Variables are the spice of life.
  Do Now: What are the primitive variable types in Java?

  C primitives:
  int         4B        -2^31 to 2^31 - 1    ~2.1b
  short       2B        -2^15 to 2^15 - 1    32768
  long        8B        -2^63 to 2^63 - 1    big
  char        1B        -2^7 to 2^7 - 1      256

  float       4B        7 digits of precision
  double      8B        14 digits of precision

  All primitives in C are numeric - the only differences between them are floating
  point vs integer and size of variable.

  Size can be platform-dependent.
  sizeof(<TYPE>) can be used to find the size in bytes
    ex: sizeof(int)

09/13/2016
  Aim: Don't forget to read the fine print
  Do Now: What is the smallest variable type that could be used to store the
          following values (using standard sizes)?

  1) 5 - char
  2) -30,000 - long
  3) 255 - int
  4) 5,000,000,000 - long

  C Primitive Variable Types
    All boolean values are numbers
      0 -> false
      anything else -> true

  printf
    The most important C function!

    Prints formatted strings

    printf(<string literal>, [<var1>, <var2>, ...])

09/19/2016
  Aim: A vast array of possibilities
  Do Now: Turn to your neighbors and discuss the things that came up
          while you were working on the euler assignment. What did you
          find surprising or confusing, helpful or harmful?

09/20/2016
  Aim: What's the point of it all?
  Do Now: Declare a regular variable and an array in a C program.
          Then print out the size of each.

  Pointers - Now the fun really starts
    Variables designed to store memory addresses (think references in java)
    * is used to declare a variable as a pointer type
      int *p
      double *q
      char *r
      
09/21/2016
  Aim: Try not to hurt yourself, the point is sharp.

  More Pointer Fun
    Pointer arithmetic
      Declaring a pointer as a specific type allows you to add to and subtract
      from the pointer by the size of its associated type.

        int *ip;
        long *lp;
        ip++; // adds 4 to ip
        lp++; // adds 8 to lp

      Pointer arithmetic only works with + and - of integers.
    Array variables are immutable pointers.

    De-reference
      * is also used as the de-reference operator. It accesses the value at the
      memory location stored in a pointer

        int i = 5;
        int *ip = &i;
        *ip++; // this sets i to 6

      Dereferencing takes priority over most operations, barring only ++/--.

09/22/2016
  Aim: How to write functioning code
  Do Now: Write a c program with a simple function.
          Call the function in main()

  Writing functions
    Function headers:
      <return type> <name>(<parameters>)

    You must declare a function before you use it.

    This can be done in a few ways:
      Write the entire function at the top of your code,
      making sure to keep the order correct.

      Write the function headers at the top of your code,
      and provide the full definition later.

      Put all the function headers in a separate header
      file (file extension .h). Then include that file in
      your .c file and provide the definitions there.

    All C functions are "pass by value"
      A parameter is a copy of the variable passed into
      the function. The original variable is not touched.

09/23/2016
  Aim: Time to stop stringing you along.
  Do Now: Create a char array of a reasonable size.
          Print it out using %s as the formatting character.

  C strings
    Strings are character arrays that end with a null character ('', 0, '\0')

    The terminating null character is a convention, but string functions
    will not work correctly without it.

    When you create a literal string using "", an immutable string is created
    in memory, so if you create the same string literal again, the computer does
    not need to allocate more memory. These strings are always null terminated.

  Valid ways to declare strings:
    char s[256];
      Normal array declaration, allocates 256 bytes, nothing
      is set automatically.

    char s[256] = "Imagine";
      Allocates 256 bytes. Creates the immutable string "Imagine" and then
      copies it (including the terminating null) into the array.

    char s[] = "Tuesday";
      Allocates 8 bytes. Creates the immutable string "Tuesday" and then
      copies it (including the terminating null) into the array.

    char *s = "Mankind";
      Creates the immutable string "Mankind", and returns a pointer to that
      string. Since the pointer is to an immutable piece of memory, you
      cannot modify things created in this way.

09/26/2016
  Aim: A string of functions.
  Do Now: Write a function that returns the length of a string,
          assuming it is null-terminated.

09/29/2016
  Aim: Make it so

  Make
    Create compiling instructions and setup dependencies

    Standard name for the file is makefile

    Syntax:
      <target>: <dependencies>
      <tab><rules>

10/05/2016
  Aim: If these files won't behave, we'll have to separate them!

  Separate compilation
    You can combine multiple c files into a c program by including them all in
    one gcc command.
    
      gcc test.c string.c foo.c woohoo.c

    You cannot have duplicate function or global variable names across the files.

  gcc -c
    Generate a compiled "object", or .o file

    Does not create a fully functional program, but is compiled code

    .o files can be linked with .c files through gcc

10/06/2016
  Aim: malloc & free: the dynamic duo!

  0: malloc, free
  1: calloc, realloc

  malloc(int x)
    Allocates x bytes of memory (from the heap).

  calloc(int n, int x)
    Allocates n * x bytes of memory, ensuring that each part is set to 0.

  realloc(void *p, int x)
    Changes the amount of memory allocated to a given block.

    p must be a pointer to the beginning of an allocated block of memory,
    but it does not have to be the original pointer.

  free(void *p)
    Releases dynamically allocated memory.
    
10/07/2016
  Aim: Structured programming

  void *
    The dynamic memory functions deal in arbitrary blocks of memory.
    There is no regular type associated with the block.

    void * is considered to be a pointer to a 1 byte block of memory,
    so pointer arithmetic will be based on 1.

    Whenever possible you should typecast void * values to the appropriate type.

      int *ip;
      ip = (int *) malloc(5 * sizeof(int));

  struct
    A collection of values in a single data type

    struct {
      int a;
      char x;
    } s;

      Here, s is a variable of type
        struct {
          int a;
          char x;
        }.

10/11/2016
  Aim: Get Dem Bugs
  Do Now: What's wrong with this function?

  struct node *insert_front(struct node *n, int i) {
    struct node new;

    new.i = i;
    new.next = n;

    return &new;
  }

  
  typedef
    Provide a new name for an existing data type.

    typedef <real type> <new name>;
      typedef unsigned long size_t;
      typedef struct {
        int a;
        char x;
      } bar;

    gdb - GNU Debugger
      Allows you to get detailed information about a program while running.

      Add the -g flag to gcc to generate debugging symbols.

      Basic usage: $ gdb <program>

      Commands in gdb shell
        run: runs the program until it ends/crashes
        list: show the lines of code run around a crash
        print <var>: print a variable
        backtrace: show the current stack

10/13/2016
  Aim:

  valgrind to find memory errors

10/18/2016
  Aim: C, the ultimate hipster, using # decades before it was cool

  #
    Used to provide preprocessor instructions.
    These directives are handled before the compiler really kicks in.

    #include <<library>> OR #include "<library>"
      Link libraries to your code.

    #define <name> <value>
      Replace all occurrences of NAME with VALUE

      #define TRUE 1

      #define SQUARE(x) x * x
      ...
      int y = SQUARE(9); --> int y = 9 * 9;

    #ifndef <identifier>
    <code>
    #endif
      If the identefier has been defined, itnore all the code
      up until the endif statement.

10/19/2016
  Aim: A bit of wisdom

  Do Now: >> and << are binary operators, test them out with small integers
          and see if you can figure out what they do.
      
  Bitwise operators
    << left shift, >> right shift
      Move all bits to the left/right.
      Left shift pads with 0s, right shift truncates.
      Left and right shift do not overflow end bits into adjacent memory.

    ~ negation
      Flip every bit.

    | or
      Perform or for each pair of bits in (a, b).

    & and
      Perform and for each pair of bits in (a, b).

    ^ xor
      Perform xor for each pair of bits in (a, b).

10/21/2016
  Aim: File this under useful information.

  Do Now: What are the different kinds of file permissions?

  File permissions
    3 types:
      read, write, execute

    Permissions can be represented as 3 digit binary or 1 digit octal numbers.
      100 = 4 -> read-only
      111 = 7 -> read, write, execute

    There are three permission areas: user, group, others.
      Each can have its own permissions.
        644 -> user: read+write, group: read, other: read

  File Table
    A list of all files used by a program while it is running.
    
    Contains basic information like the file's location and size.
      
    The file table has a limited size (power of 2), usually 256.
      The size is returned by getdtablesize()

    Each file is given an integer index, starting at 0; this is referred
    to as the file descriptor.

    There are three files always open in the table:
      0 or STDIN_FILENO: stdin
      1 or STDOUT_FILENO: stdout
      2 or STDERR_FILENO: stderr

10/24/2016
  Aim: Opening up a world of possibilities.

  Do Now: In your table pairs, look at your computer number and mod it by 2.
          Then look up the following functions and describe them to your buddy.

          0. open/close
          1. read/write


  open(<path>, <flags>, <mode>) -  <fcntl.h>
    Add a file to the file table and returns its file descriptor.

    If open fails, it returns -1, storing extra error info (code) in errno.

      errno is an int variable that can be found in <errno.h>; using strerror
      (in <string.h>) on errno will return a string description of the error.

    mode
      Only used when creating a file. Set the new file's permissions using a
      3 digit octal number (leading 0).

    flags
      Determine what you plan to do with the file.

      Use the following constants:
        O_RDONLY
        O_WRONLY
        O_RDWR
        O_APPEND
        O_TRUNC
        O_CREAT
        O_EXCL (Combined with O_CREAT, returns an error if the file exists

      Each flag is a number - to combine flags use bitwise or.
        O_WRONLY = 1                    00000001
        O_APPEND = 8                    00001000
        O_WRONLY | O_APPEND = 9         00001001

  close(<file>) - <unistd.h>
    Remove a file from the file table.

    Returns 0 if successful, returns -1 and sets errno otherwise.

10/25/2016
  Aim: Read your writes!

  Do Now: Write a C program that creates a new file. Give the file read and
          write permissions to each permission area.

          Run ls -l to check the permissions.

  umask(<mask>) - <sys/stat.h>
    Set the file creation permission mask.

    By default, created files are not given the exact permissions provided in
    the mode argument to open. Some permissions are automatically shut off.

    Umask is applied by using bitwise negation on the mask, then bitwise and
    on it and the mode
      new_permissions = ~mask & mode

    Mask is octal number
      0022 is default mask
      0000 allows any permissions to be set

  read(<file descriptor>, <buffer>, <amount>) - <unistd.h>
    Read in data from a file.

    read(fd, buff, n)
      Reads n bytes from the fd's file and puts that data into buff.
      Returns the number of bytes actually read. Returns -1 and sets errno
      if unsuccessful.

    Buffer must be a pointer.

  write(<file descriptor>, <buffer>, <amount>) - <unistd.h>
    Writes data to a file.

    write(fd, buff, n)
      Writes n bytes from buff into fd's file.
      Returns the number of bytes actually written. Returns -1 and sets
      errno if unsuccessful.

    Buffer must be a pointer.
      
11/01/2016
  Aim: Where do compsci priests live? In directory!
    
  Directories
    A Unix directory is a file containign the names of the files withi
    the directory, along with basic information like file type.

    Moving files into/out of a directory means changing the directory file,
    not actually moving any data.

  opendir(<path>) - <dirent.h>
    Open a directory file, returning a pointer to a directory stream (DIR *).

    This will not change the cwd, it only allows your program to read the
    contents of the directory file.
  
  closedir(<directory stream>) - <dirent.h>
    Closes the directory stream and frees the associated pointer.

  readdir(<directory stream>) - <dirent.h>
    Returns a pointer to the next entry in a directory stream, or NULL
    if all entries have already been returned.

  struct dirent - <sys/types.h>
    Directory struct that contains the information stored in a directory file.

    Some of the data members:
      d_name: Name of file
      d_type: File type as an int

11/03/2016
  Aim: Input? fgets about it!

  getcwd(char *buffer, int n) - <unistd.h>
    Get the current working directory (cwd) of a program.

    Copies up to n characters of the path of the cwd into buffer.

  chdir(char *path) - <unistd.h>
    Change the working directory of a program.

    Returns 0 if successful, -1 (and errno) if not.

    Keep track of file paths while using chdir!

  Command line arguments: int main(int argc, char *argv[])
    Program name is considered the first command line argument.

    argc: number of command line arguments
    argv: array of command line arguments
  
  scanf(char *format, ...)
    Reads in data from stdin using the format string to determine types.
    Puts the data in each variable.
    Variables must be pointers.

    Example:
      int i;
      float f;
      double d;

      scanf("%d %f %lf", &i, &f, &d);

11/04/2016
  Aim: Sending mixed signals

  fgets(char *s, int n, FILE *fp) - <stdio.h>
    Read in from a file stream and store it in a stream.

    Reads at most n - 1 characters from file stream fp and stores it in s.

    File pointer
      FILE * type, more complex than a file descriptor
      stdin, stdout, stderror already file pointers

11/07/2016
	Aim: Are your processes running? - Then you should go out and catch them!

	Processes
		Every running program is a process. A process can create subprocesses,
		but these are no different from regular processes.

		A processor can handle 1 process per cyccle (per core). "Multitasking"
		appears to happen because the processor switches between all the active
		processes quickly.

		pid
			Every process has a unique identifier called the pid.
			pid 1 is the init process.
			Each entry is the /proc directory is a current pid.

		getpid() - <unistd.h>
			Returns pid of current process

		getppid() - <unistd.h>
			Returns pid of parent process

	Signals
		Limited way of sending information to a process.

		$ kill <PID>
			Command line utility to send a signal to a process.
			Sends signal 15 (SIGTERM) to PID.

		$ kill -<SIGNAL> <PID>
			Sends SIGNAL to PID.

		$ killall [-<SIGNAL>] <PROCESS>
			Sends SIGTERM (or SIGNAL if provided) to all processes named PROCESS.

		kill(int pid, int signal) - <signal.h>
			Returns 0 on success or -1 (errno) on failure.

		static void sighandler(int signo) - <signal.h>
			Signal handler, necessary to handle signals.
	
11/10/2016
	Aim: What the fork?

	fork() - <unistd.h>
		Creates a separate process based on the current one.

		The new process is the child, the original is the parent.

		The child process is a duplicate of the parent process. All parts of the
		parent process are copied, including stack and heap memory and the file
		table.

		Returns 0 to the child and the child's PID to the parent or -1 (errno).

		If a parent process ends before the child, the child's new parent PID is 1.
	
11/15/2016
	Aim: Wait for it...

	But what about threads you ask?
		A quick note on threads: A thread is a separate executable entity similar
		to a child process, except that a thread is not a standalone process.

		It does not have its own memory space; instead, it shares its parent's
		memory.

	wait(int *status) - <unistd.h>
		Stops a parent process from running until any child has provided status
		information to the parent via a signal. (Usually the child has exited.)

		Returns the pid of the child that exited, or -1 (errno).

11/16/2016
	Aim: Time to make an executive decision

	Do Now: Look up execlp, execvp

	execlp(char *path, char *arg, ...) - <unistd.h>
	execvp(char *path, char *argv[]) - <unistd.h>
		Runs an executable file, replacing the calling process.

		execlp accepts arguments as a series of strings, the last of which must
		be NULL.

		execvp accepts arguments as an array of strings, which must be terminated
		by (char *) NULL.

11/17/2016
	Aim: Let's take this to delimit!

	strsep(char **src, char *delimiter) - <string.h>
		Used for parsing a string with a common delimiter.

		Locates the first occurrence of any of the delimiters specified and replaces
		it with NULL.

		Returns the beginning of the original string, setting the source string to
		the string starting at 1 index past the location of the new NULL.

11/22/2016
	Aim: Redirection - how does it ... SQUIRREL

	File Redirection
		Changing the usual input/output behavior of a program.

		Command line redirection
			<COMMAND> > <FILE>
				Redirects stdout to a file, overwriting the contents of that file.

				ls > file_list

			<command> >> <file>
				Redirects stdout to a file, appending to the contents of that file.

			<command> 2> <file>
				Redirects stderr to a file, overwriting the contents of that file.

			<command> 2>> <file>
				Redirects stderror to a file, appending to the contents of the file.

			<command> &> <file>
				Redirect stdout and stderr.

			<command> < <file>
				Redirects stdin from a file.

			<command> | <command>
				Redirects stdout from one command to stdin of the next

				ls | wc

		Redirection in C programs
			dup2(fd1, fd2) - <unistd.h>
				Duplicates the behavior for fd1 at fd2, redirecting fd2 to fd1.
				You will lose any reference to fd2 -- that file is closed.

			dup(fd) - <unistd.h>
				Duplicates an existing entry in the file table.
				Returns a new file descriptor for the duplicate entry.

11/29/2016
	Aim: Sharing is caring!

	Do Now:
		Write a simple C program that creates a child process and have the
		parent wait for the child to exit.

		Create a primitive variable in the parent before forking, then modify
		that variable in the child and print it out in both the child and
		parent.

	Shared Memory - <sys/shm.h>, <sys/ipc.h>, <sys/types.h>
		A segment of heap memory that can be accessed by multiple processes.

		Shared memory is accessed via some key that is known by any process that
		needs to access it.

		Shared memory does not get released when a program exits.

		5 shared memory operations:
			Create the segment (once)
			Access the segment (once per process)
			Attach the segment to a variable (once per process)
			Detach the segment from a variable (once per process)
			Remove the segment (once)

		shmget(key_t key, size_t size, int flags)
			Create or access a shared memory segment.

			Returns a shared memory descriptor (similar idea to a file descriptor),
			or -1 and sets errno if it fails.

			key
				Unique integer identifier for the shared memory segment (like a file
				name).

			size
				Amount of memory to request.

			flags
				Includes permissions for the segment.

				Combine with bitwise or.

				IPC_CREAT
					Create and zero out segment if it does not exist, otherwise grant
					access to it.
									
				IPC_EXCL
					Fail if the segment already exists and IPC_CREAT is on.

			int sd = shmget(24601, 1024, IPC_CREAT | 0664);

		shmat(int descriptor, void *address, int flags)
			Attach a shared memory segment to a variable.

			Returns a pointer to the segment or -1 (errno).

			key
				The return value of shmget.
				
			address
				If 0, the OS will provide the appropriate address.

			flags
				Usually 0. There is one useful flag.

				SHM_RDONLY
					Make memory read only.

11/30/2016
	Aim: Memes

	ipcs
		Prints shared memory segments, among other information.

	More shared memory
		shmdt(void *pointer)
			Detach a variable from a shared memory segment.

			Returns 0 upon success, -1 upon failure.

			pointer is the address used to access the segment.

		shmctl(int descriptor, int command, struct shmid_ds *buffer)
			Perform operations on the shared memory segment.

			Each shared memory segment has metadata that can be stored in a struct
			(struct shmid_ds).

			Some of that data stored: last access time, size, creator pid, most recent
			access pid.

			descriptor
				Return value of shmget.

			command
				IPC_RMID
					Remove a shared memory segment.

					Buffer argument can be 0.

				IPC_STAT
					Populate the buffer (struct shmid_ds) with information.

				IPC_SET
					Set some of th einformation for the segment to the info in buffer.

		ftok(char *path, int x) - <sys/ipc.h>
			Generate a key useful for IPC functions.

			path
				A path to some file that must be accessible by the program.

			x
				An int used to generate the key.

			The same path and same x will always generate the same key.

			int sd = shmget(ftok("dir/file", 12), 1024, IPC_CREAT | 0664);
			
12/05/2016
	Aim: How do we flag down a resource?

	Semaphores
		Created by Edgser Dijkstra.

		IPC construct used to control access to a shared resource (like a file or
		shared memory).

		Essentially, a semaphore is a counter that represents how many processes
		can access a resource at any given time.
			If a semaphore has a value of 3, then it can have 3 active "users".
			If a semaphore has a value of 0, then it is "unavailable".
			Mutexes are semaphores with a value of 1.

		Most semaphore operations are "atomic", meaning they will not be split up
		into multiple processor instructions.

	Semaphore operations
		Create a semaphore
		
		Set an initial value
		
		Up(S) / V(S)
			Release the semaphore to signal you are done with its associated resource.

			S++
		Down(S) / P(S)
			Attempt to take the semaphore.

			If the semaphore is 0, wait for it to be available.

			while (S == 0)
				block

			S--

		Remove a semaphore

	Sempahores in C - <sys/types.h>, <sys/ipc.h> <sys/sem.h>
		semget(int key, int amount, int flags)
			Create/Get access to a semaphore.

			This is not the same as Up(S) or Down(S) - it does not modify the
			semaphore.

			Returns a semaphore descriptor or -1 (errno).

			key
				Unique semaphore identifier (use ftok).

			amount
				Semaphores are stored as sets with potentially many semaphores
				together. This parameter sets the number of semaphores to
				create/get.

			flags
				Includes permissions for the semaphore.

				Combine with bitwise or.

				IPC_CREAT
					Create the semaphore at set value to 0.

				IPC_EXCL
					Fail if the semaphore already exists and IPC_CREAT is on.

12/06/2016
	Aim: What's a semaphore? To control resources!

	ipcs to see current semaphores

	Semaphores in C, cont'd.
		semctl(int descriptor, int index, int operation[, union semun data])
			Control the semaphore, including:
				Set the semaphore's value
				Remove the semaphore
				Get the current value
				Get information about the semaphore

			These operations are not atomic.

			descriptor
				Return value of semget.

			index
				The index of the semaphore you want to control in the semaphore set
				identified by the descriptor.

				0 in a single semaphore set.

			operation
				A constant.

				IPC_RMID
					Remove the semaphore.

				SETVAL
					Set the value (requires data).

				SETALL
					Set the value of every semaphore in the set (requires data).

				GETVAL
					Return the value.

				IPC_STAT
					Populate buffer with information about the semaphore (requires data).

			data
				Requires union semun to be defined in the calling program as follows.

				union semun {
					int val; // Value for SETVAL
					struct semid_ds; // Buffer for IPC_STAT, IPC_SET
					unsigned short *array; // Array for GETALL, SETALL
					struct seminfo *__buf; // Buffer for IPC_INFO (Linux-specific)
				};

				Unions are like structs, but are designed to hold only one of its children at once.

		semop(int descriptor, struct sembuf *operation, int amount)
			Perform semaphore operations.

			All operations performed via semop are atomic!

			descriptor
				Return value of semget.

			amount
				The amount of semaphores you want to operate on in the semaphore set.

				1 for a single semaphore set.

			operation
				A pointer to a struct sembuf value.

				struct sembuf {
					short sem_op;
					short sem_num;
					short sem_flag;
				};

				sem_num
					The index of the semaphore you want to work on.

				sem_op
					-1: Down(S)
					1: Up(S)

					Any -/+ will work; you will be requesting/releasing that value from
					the semaphore.

					0: Block until the semaphore reaches 0

				sem_flag
					Provide further options.

					SEM_UNDO
						Allow the OS to undo the given operation. Useful in the event that
						the program exits before it can release a semaphore.

					IPC_NOWAIT
						Instead of waiting for the semaphore to be available, return an
						error.
						
12/07/2016
	Aim: What goes Up really should come Down.

	Do Now
		Write a semaphore control program like the one developed in class yesterday.

		It should be able to:
			Create a semaphore and set an initial value.
			View the current value.
			Remove the semaphore.

		The program behavior should be determined by a command line argument.

12/12/2016
	Aim: Ceci n'est pas une pipe

	Pipe
		A conduit between 2 separate processes on the same computer.

		Pipes have 2 ends, a read end and a write end.

		Pipes are unidirectional (a single pipe must be either read or write only
		in a process).

		Pipes act just like files.

		You can transfer any data you like through a pipe using read/write.

		Unnamed pipes have no external identification.

		pipe(int descriptors[2]) - <unistd.h>
			Creates an unnamed pipe.

			Returns 0 if the pipe was created, -1 if not.

			Opens both ends of the pipes as files.

			descriptors
				Array that will contain descriptors for each end of the pipe.
				
12/13/2016
	Aim: A pipe by any other name...

	Named pipes
		Also known as FIFOs.

		Same as unnamed pipes, except FIFOs have a name that can be used to identify
		them via different programs.

		Like unnamed pipes, FIFOs are unidirectional.

		$ mkfifo <pipe name>
			Shell command to make a FIFO.

		mkfifo(char *name, int permissions) - <sys/types.h>, <sys/stat.h>
			C function to create a FIFO.

			Returns 0 on success, -1 on failure.

			Once created, the FIFO acts like a regular file, and we can use open, read,
			write, and close on it.

			FIFOs will block on open until both ends of the pipe have a connection.

12/14/2016
	Aim: Always remember to tip your servers

	Do Now:
		Design a program that has 2 executable files.

		One is designed to ask a user for input and send that input to the second.

		The second should take input from the first, "process" it in some way, and
		send a response to the first.

		Do not write this program, design how it would work. How many pipes would
		you need? What kind of pipes?

		How will you ensure that both programs can send and receive data from each other?

		2 FIFOs, one for 1->2, other for 2->1
		
	Server/Client Program Paradigms
		Handshake
			A procedure to ensure that a connection has been established.

			Both ends of the connection must verify that they can send and receive
			data to and from each other.

			Basic procedure
				1. Server creates a FIFO (Well Known Pipe).
				2. Server waits for a connection.
				3. Client creates a private FIFO.
				4. Client connects to server and sends the private FIFO name.
				5. Client waits for a message from the server.
				6. Server receives the client message and removes the well known pipe.
				7. Server connects to client FIFO and sends an initial acknowledgement.
				8. Client receives the server message and removes its private pipe.
				9. Client sends a message back to server.

12/20/2016
	Aim: Cisco in an hour(tm)

	Do Now: What is needed in order for 2 computers to communicate with each other?
		- Physical connection
		- Identification
		- Protocol/common language/common packaging for data
		- Routing 
		- Security
		- Data validation
		- User experience

	OSI 7-Layer Model
		Used to help conceptualize the different parts of network connections.

		The top layer is the most concrete, with each subsequent layer becoming more
		abstract (relying less on the physical connections and more on code). The
		last layer is the application layer.

		The layers:
			1. Physical
			2. Data Link
			3. Network
			4. Transport
			5. Session
			6. Presentation
			7. Application

		If you are working on a particular layer, you should not have to think too
		much about the other layers.

		Physical Layer
			How computers are physically connected.

			Things like electrons running across wires, radio signals pulsing through
			the air...

			A brief history of wired connections
				Thicknet
					A single coaxial cable runs throughout the network; "vampire taps" go
					into the cable and leech the data out.
	
				Thinnet
					A single coaxial cable runs throughout the network; T-junctions are
					used to splice connections.

				In both Thicknet and Thinnet, all data is sent to all computers.

				Each computer added increases the power drain on the entire system,
				degrading service.

12/21/2016
	Aim: Cisco in an hour(tm) Part II: Electric Boogaloo

	Physical Layer (cont'd.)
		Token Ring
			Each computer connects to the next computer, forming a connection ring.

			Only one computer in the ring can transmit data at any given time. 

			The network sends a "token" throughout the ring, which contains the
			identity of the computer allowed to use the network. All other computers
			must wait to use the network.

			No possibility of collisions.

		Ethernet
			Multiple computers connect to a single hub or switch.

			Hub
				Broadcasts all received data to all other computers.

			Switch
			  Sends data to a specific computer.

			The more computers you add to an ethernet network, the greater the
			chance of collisions.

12/22/2016
	Aim: Cisco in an hour(tm) Part III: In 3D!

	Data Link Layer
		Point-to-point transmission between devices on the same local network.

		Ethernet Connections
			Each device is given a unique 6-byte MAC (Media Access Control) address;
			this is set on each network card when it is made.

			Data is packaged into frames
				Ethernet Frame: <prefix><dest><source><...><data><checksum>

					prefix
						8 bytes
						10101010 * 7 + 10101011

					dest/source
						6 bytes
						MAC address of destination/source

					...
						8 bytes
						Information about frame type

					data
						46-1500 bytes
						Data to send/receive

					checksum
						4 bytes
						Verifies data integrity

			MTU
				Maximum Transmission Unit
				1500 bytes for Ethernet

01/03/2017
	Aim: Cisco in an hour(tm) IV: A New Hope

	Network Layer
		The layer that transmits data between two separate networks.

		It is not concerned with whether data was sent successfully or not (connectionless).

		Major features include addressing, routing, and packet forwarding.

		IP (Internet Protocol) Addresses
			IPv4: 4-byte address
				[0-255].[0-255].[0-255].[0-255]

			Routing is made easier by having IP addresses distributed in blocks.

01/04/2017
	Aim: Cisco in an hour(tm) V for Vendetta

	Network Layer
		Data is broken into packets (IPv4).

		IPv4 packet: <header info><packet length><fragment info><time to live>
								 <protocol><header checksum><source><destination><...><data>

			header info
				2 bytes

				Type of packet, length of header

			packet length
				2 bytes

				length of packet

			fragment info
				4 bytes

				Full payloads may be broken up; this contains total number of fragments
				and which fragment this packet is.

			time to live
				1 byte

				Maximum number of hops before the packet dies.

			protocol
				1 byte

				TCP/UDP/....

			header checksum
				2 bytes

				Checksum to verify header information.

			source
				4 bytes

			destination
				4 bytes

			...
				4 bytes

				Optional information depending on protocol, type, etc.

			data
				20 - 65535 bytes

			IPv4 MTU is 65535 B.
		
		IPv6
			Biggest difference is the address space goes from 2^32 to 2^128.

			Addresses are written as 8 groups of 4 hexadecimal digits.
				87ab:301c:73ab:8731:ff87:abcd:dead:feed

				Leading 0s are ignored, consecutive 0-groups can be replaced with
				::, but only once in an address

			IPv4 addresses can be represented with 5 0-groups, 1 f-group (96 bits)
			followed by the regular IPv4 address (32 bits).
				::ffff:149.89.150.100

			Jumbograms
				Increases the MTU to ~4.3 billion (2^32)

			Other improvements in IPv6 make the protocol incompatible with IPv4.

01/05/2017
	Aim: Cisco in an hour(tm) VI: The Undiscovered Country

	Transport Layer
		Computer to computer connection over a network.

		Unconcerned with the individual hops of layer 3 traffic.

		Each destination address has multiple ports -- 65,535 ports, to be exact.

		Each port corresponds to a particular service.

		Ports <1024 are well known, reserved ports.

		Ports are regulated by the Internet Assigned Numbers Authority (IANA).

		Transmission Control Protocol (TCP)
			Reliable connection that guarantees data delivery.

			Data is considered a continuous stream that arrives in the order it is
			sent (which may not be true in the network layer).

			Connections are established using a 3-way handshake
				0. Server binds to a port and waits.
				1. Client sends a SYN message to the server.
				2. Server sends the client a SYN_ACK message.
				3. Client sends an ACK message to the server.

		User Datagram Protocol (UDP)
			Does not require an explicit connection.

			Data is sent as discrete datagrams with a set size (as opposed to a
			continuous stream).

			Datagrams may be dropped or received out of order.

			Assumes that any kind of error checking is handled at a later level.

01/06/2017
	Aim: Cisco in an hour(tm) VII: Adrian's Revenge

	Remaining Layers
		5. Session
		6. Presentation
		7. Application

		These layers are incorporated into programs that use network connections.

		Session layer represents end-to-end connectioms in a program (sockets).

		Presentation layer represents how programs package transmitted data.

		Application layer represents the programs that users interact with.

	Sockets
		<sys/socket.h>, <sys/types.h>

		A socket is a network connection between two programs.

		A socket has 2 ends, each one consisting of an IP Address/Port pair.

		To use a socket:
			1. Create the socket
			2. Bind it to an address and a port
			3. Listen/initiate a connection
			4. Send/receive data

		socket(<domain>, <type>, <protocol>) - <sys/socket.h>
			Creates a socket and returns its descriptor (an entry in the file table).

			domain
				Type of address - IPv4, IPv6, etc.

				AF_INET = IPv4

			type
				TCP/UDP/etc.

				SOCK_STREAM = TCP
				SOCK_DGRAM = UDP

			protocol
				Combination of domain and type settings.

				If set to 0, the OS will set to correct protocol.

			int sd = socket(AF_INET, SOCK_STREAM, 0);

		bind(<socket descriptor>, <address>, <address length>) - <sys/socket.h>
			Binds the socket to an address and port.

			Returns 0 on success, -1 (errno) on failure.

			socket descriptor
				Return value of socket().

			address
				Pointer to a struct sockaddr_in (struct sockaddr_in6 for IPv6).

				struct sockaddr_in {
					int sin_family; // address domain (AF_INET, etc.)
					int sin_addr;   // IP address in binary -- INADDR_ANY for any incoming connection
				}

					sin_family
						Address domain, like AF_INET.

					sin_addr
						IP address in binary.

						INADDR_ANY takes any incoming connections.

						inet_aton(<string>, <address variable>) - <arpa/inet.h>
							Converts a string representing an IP address to the correct format
							and places it in the second parameter.

					sin_port
						htons(int port)
							Returns the port in the correct order (endianness).

							big endian: most significant byte first
							little endian: least significant byte first

01/10/2017
	Aim: Socket to me

	listen(<socket descriptor>, <queue length>) - <sys/socket.h>
		TCP server will listen to a socket and wait for an incoming connection.

		listen() is server only.

		socket descriptor
			Return value of socket().

		queue length
			Number of connections that can wait.

			Deprecated; no longer used.

		Returns 0 on success, -1 (errno) on failure.

	accept - <sys/socket.h>
		Set up a TCP connection (server only).

		Handles the required 3-way handshake.

		A complete socket has 5 pieces of information: IP Address and port # for
		both the client and the server and the protocol (TCP/UDP).

		Once a client connection gets past listen(), accept() creates a new socket
		with client information added, and returns a descriptor to the new socket.
		
01/11/2017
	Aim: Get more power from your sockets

	
